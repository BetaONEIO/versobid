var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { Message, Chat } from '../../types';\nimport { useAuthStore } from '../../stores/authStore';\nimport toast from 'react-hot-toast';\n\ninterface UseChat {\n  messages: Message[];\n  chats: Chat[];\n  loading: boolean;\n  sending: boolean;\n  sendMessage: (content: string, recipientId: string, imageUrl?: string) => Promise<void>;\n  markMessagesAsRead: () => Promise<void>;\n}\n\nexport function useChat(chatId: string): UseChat {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (chatId) {\n      fetchMessages();\n      const unsubscribe = subscribeToMessages();\n      markMessagesAsRead();\n      return () => {\n        unsubscribe();\n      };\n    } else {\n      fetchChats();\n    }\n  }, [chatId, user?.id]);\n\n  const fetchMessages = async () => {\n    if (!chatId) return;\n    \n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('chat_id', chatId)\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      setMessages(data || []);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchChats = async () => {\n    if (!user?.id) return;\n\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('chats')\n        .select('*, participant:profiles(*)')\n        .or("], ["typescript\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { Message, Chat } from '../../types';\nimport { useAuthStore } from '../../stores/authStore';\nimport toast from 'react-hot-toast';\n\ninterface UseChat {\n  messages: Message[];\n  chats: Chat[];\n  loading: boolean;\n  sending: boolean;\n  sendMessage: (content: string, recipientId: string, imageUrl?: string) => Promise<void>;\n  markMessagesAsRead: () => Promise<void>;\n}\n\nexport function useChat(chatId: string): UseChat {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (chatId) {\n      fetchMessages();\n      const unsubscribe = subscribeToMessages();\n      markMessagesAsRead();\n      return () => {\n        unsubscribe();\n      };\n    } else {\n      fetchChats();\n    }\n  }, [chatId, user?.id]);\n\n  const fetchMessages = async () => {\n    if (!chatId) return;\n    \n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('chat_id', chatId)\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      setMessages(data || []);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      toast.error('Failed to load messages');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchChats = async () => {\n    if (!user?.id) return;\n\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('chats')\n        .select('*, participant:profiles(*)')\n        .or("]));
participant1_id.eq.$;
{
    user.id;
}
participant2_id.eq.$;
{
    user.id;
}
")\n        .order('last_message_at', { ascending: false });\n\n      if (error) throw error;\n      setChats(data || []);\n    } catch (error) {\n      console.error('Error fetching chats:', error);\n      toast.error('Failed to load chats');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const subscribeToMessages = () => {\n    const channel = supabase\n      .channel(";
chat: $;
{
    chatId;
}
")\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: ";
chat_id = eq.$;
{
    chatId;
}
"\n        },\n        (payload: { new: Message }) => {\n          setMessages(prev => [...prev, payload.new]);\n          if (payload.new.recipient_id === user?.id) {\n            markMessagesAsRead();\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  };\n\n  const markMessagesAsRead = async () => {\n    if (!user?.id || !chatId) return;\n    \n    try {\n      await supabase\n        .from('messages')\n        .update({ read: true })\n        .eq('chat_id', chatId)\n        .eq('recipient_id', user.id)\n        .eq('read', false);\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const sendMessage = async (content: string, recipientId: string, imageUrl?: string) => {\n    if (!user?.id || !chatId || !content.trim()) return;\n\n    try {\n      setSending(true);\n      const { error } = await supabase\n        .from('messages')\n        .insert([{\n          chat_id: chatId,\n          sender_id: user.id,\n          recipient_id: recipientId,\n          content,\n          image_url: imageUrl,\n          created_at: new Date().toISOString(),\n          read: false\n        }]);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      toast.error('Failed to send message');\n      throw error;\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return {\n    messages,\n    chats,\n    loading,\n    sending,\n    sendMessage,\n    markMessagesAsRead,\n  };\n}\n"(__makeTemplateObject([""], [""]));
