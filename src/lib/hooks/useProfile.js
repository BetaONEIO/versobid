var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { Profile } from '../../types';\nimport { useAuthStore } from '../../stores/authStore';\nimport toast from 'react-hot-toast';\n\nexport function useProfile(userId?: string) {\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (userId || (user && user.id)) {\n      fetchProfile(userId || user.id);\n    }\n  }, [userId, user]);\n\n  const fetchProfile = async (id: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      setProfile(data);\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      toast.error('Failed to load profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates: Partial<Profile>) => {\n    if (!user) return;\n\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', user.id);\n\n      if (error) throw error;\n      \n      await fetchProfile(user.id);\n      toast.success('Profile updated successfully');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error('Failed to update profile');\n      throw error;\n    }\n  };\n\n  return {\n    profile,\n    loading,\n    updateProfile,\n    refreshProfile: () => user?.id && fetchProfile(user.id),\n  };\n}\n"], ["typescript\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { Profile } from '../../types';\nimport { useAuthStore } from '../../stores/authStore';\nimport toast from 'react-hot-toast';\n\nexport function useProfile(userId?: string) {\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (userId || (user && user.id)) {\n      fetchProfile(userId || user.id);\n    }\n  }, [userId, user]);\n\n  const fetchProfile = async (id: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      setProfile(data);\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      toast.error('Failed to load profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates: Partial<Profile>) => {\n    if (!user) return;\n\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', user.id);\n\n      if (error) throw error;\n      \n      await fetchProfile(user.id);\n      toast.success('Profile updated successfully');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error('Failed to update profile');\n      throw error;\n    }\n  };\n\n  return {\n    profile,\n    loading,\n    updateProfile,\n    refreshProfile: () => user?.id && fetchProfile(user.id),\n  };\n}\n"]))(__makeTemplateObject([""], [""]));
